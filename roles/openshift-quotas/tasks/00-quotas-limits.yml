---
# tasks file for openshift-quotas
- name: set quotas and limiranges for {{ openshift_project }}
  block:
    - name: check for existence of {{ openshift_project }}
      k8s_facts:
        kind: Project
        name: "{{ openshift_project }}"
      register: project_result
    
    - name: check project result
      fail:
        msg: "project {{ openshift_project }} doesn't exist, or this user doesn't have permissions to access it"
      when: not project_result.resources

    - name: create temporary templates directory
      tempfile:
        state: directory
        suffix: openshift
      register: openshift_templates_dir

    - name: log temporary templates location
      debug:
        msg: "{{ openshift_templates_dir.path }}"

    - name: create project quotas file from template
      template:
        src: core-quotas.yml.j2
        dest: "{{ openshift_templates_dir.path }}/core-quotas-{{ openshift_project }}.yml"

    - name: create project limitranges file from template
      template:
        src: core-resource-limits.yml.j2
        dest: "{{ openshift_templates_dir.path }}/core-resource-limits-{{ openshift_project }}.yml"    

    - name: create project quotas for {{ openshift_project }}
      k8s:
        state: present
        verify_ssl: no
        src: "{{ openshift_templates_dir.path }}/core-quotas-{{ openshift_project }}.yml"

    - name: create project limitranges for {{ openshift_project }}
      k8s:
        state: present
        verify_ssl: no
        src: "{{ openshift_templates_dir.path }}/core-resource-limits-{{ openshift_project }}.yml"

    - name: get a list of dcs in {{ openshift_project }}
      k8s_facts:
        kind: DeploymentConfig
        namespace:  "{{ openshift_project }}"
      register: dc_list

    - name: patch dcs in {{ openshift_project }} to remove existing requests and limits
      command: "oc patch dc/{{ item.metadata.name }} --type json -p '[{ \"op\": \"remove\", \"path\": \"/spec/template/spec/containers/0/resources\" }]'}} -n {{ item.metadata.namespace }}"
      loop: "{{ dc_list.resources | flatten(levels=1) }}"
      ignore_errors: true

    - name: clear up temporary templates directory
      file:
        path: "{{ openshift_templates_dir.path }}"
        state: absent
      when: openshift_templates_dir.path is defined
  rescue:
    - debug:
        msg: "skipping to next item, or finishing if no further items exist"